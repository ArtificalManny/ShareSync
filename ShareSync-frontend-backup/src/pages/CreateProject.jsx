import React, { useState, useContext } from 'react';
import { useNavigate } from 'react-router-dom';
import { AuthContext } from '../AuthContext';
import axios from 'axios';
import { PlusCircle, Users, Eye } from 'lucide-react';
import './CreateProject.css';

const CreateProject = () => {
  const [title, setTitle] = useState('');
  const [description, setDescription] = useState('');
  const [category, setCategory] = useState('');
  const [members, setMembers] = useState([]);
  const [newMember, setNewMember] = useState('');
  const [privacy, setPrivacy] = useState('public');
  const [error, setError] = useState('');
  const { user, socket, addProject } = useContext(AuthContext);
  const navigate = useNavigate();

  const handleAddMember = () => {
    if (newMember && !members.includes(newMember)) {
      setMembers([...members, newMember]);
      setNewMember('');
    }
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    try {
      if (!title || !category) {
        setError('Title and category are required');
        return;
      }

      const project = {
        id: `proj-${Date.now()}`, // Temporary ID, should be generated by backend
        title,
        description,
        category,
        admin: user.email,
        members: members.map((email) => ({
          email,
          role: 'member',
          profilePicture: 'https://via.placeholder.com/150',
        })),
        privacy,
        status: 'Not Started',
        tasksCompleted: 0,
        totalTasks: 0,
        announcements: [],
        posts: [],
      };

      // Create the project
      const response = await axios.post('http://localhost:3000/api/projects', project);
      const createdProject = response.data;
      console.log('Project created:', createdProject);

      // Update the user's projects in the backend
      const updatedProjects = [...(user.projects || []), createdProject];
      await axios.put('http://localhost:3000/api/auth/me', { projects: updatedProjects });

      // Update local state
      addProject(createdProject);

      // Emit socket event to notify other users
      socket.emit('project-create', createdProject);

      // Redirect to ProjectHome page
      navigate(`/projects/${createdProject.id}`);
    } catch (err) {
      setError(err.response?.data?.message || 'Failed to create project');
    }
  };

  if (!user) {
    return (
      <div className="create-project-container">
        <p className="text-holo-gray text-center">
          Please <Link to="/login" className="text-holo-blue hover:underline">log in</Link> to create a project.
        </p>
      </div>
    );
  }

  return (
    <div className="create-project-container">
      <div className="max-w-2xl mx-auto p-6">
        <h2 className="text-3xl font-inter text-holo-blue mb-6 text-center animate-text-glow">
          Create a New Project
        </h2>
        {error && <p className="text-red-500 text-center mb-4">{error}</p>}
        <div className="card p-6 glassmorphic">
          <div className="space-y-6">
            <div className="flex items-center gap-2">
              <input
                type="text"
                value={title}
                onChange={(e) => setTitle(e.target.value)}
                placeholder="Project Title"
                className="input-field w-full rounded-full"
                required
              />
            </div>
            <div className="flex items-center gap-2">
              <textarea
                value={description}
                onChange={(e) => setDescription(e.target.value)}
                placeholder="Project Description"
                className="input-field w-full h-24 rounded-lg"
              />
            </div>
            <div className="flex items-center gap-2">
              <select
                value={category}
                onChange={(e) => setCategory(e.target.value)}
                className="input-field w-full rounded-full"
                required
              >
                <option value="">Select Category</option>
                <option value="Technology">Technology</option>
                <option value="Marketing">Marketing</option>
                <option value="Design">Design</option>
                <option value="Education">Education</option>
              </select>
            </div>
            <div className="flex items-center gap-2">
              <Eye className="w-5 h-5 text-holo-pink" />
              <label className="text-primary">Privacy:</label>
              <select
                value={privacy}
                onChange={(e) => setPrivacy(e.target.value)}
                className="input-field flex-1 rounded-full"
              >
                <option value="public">Public</option>
                <option value="private">Private</option>
              </select>
            </div>
            <div className="flex items-center gap-2">
              <Users className="w-5 h-5 text-holo-pink" />
              <input
                type="email"
                value={newMember}
                onChange={(e) => setNewMember(e.target.value)}
                placeholder="Add member by email"
                className="input-field flex-1 rounded-full"
              />
              <button onClick={handleAddMember} className="btn-primary rounded-full">
                Add
              </button>
            </div>
            {members.length > 0 && (
              <div className="members-list">
                <h3 className="text-lg font-inter text-holo-blue mb-2 flex items-center">
                  <Users className="w-5 h-5 mr-2 text-holo-pink" /> Members
                </h3>
                <ul className="space-y-2">
                  {members.map((member, index) => (
                    <li key={index} className="text-primary">{member}</li>
                  ))}
                </ul>
              </div>
            )}
            <button onClick={handleSubmit} className="btn-primary rounded-full w-full animate-glow flex items-center justify-center">
              <PlusCircle className="w-5 h-5 mr-2" /> Create Project
            </button>
          </div>
        </div>
      </div>
    </div>
  );
};

export default CreateProject;